<?xml version="1.0" encoding="UTF-8" ?>

<project name="JS Minifier" default="build">

  <property name="project_org" value="websharks" />
  <property name="project_slug" value="js-minifier" />
  <property name="project_sns" value="JsMinifier" />

  <property name="project_version" value="%y%m%d" />
  <property name="project_php_required_version" value="5.3" />
  <property name="project_php_up_to_version" value="${php.version}" />
  <property name="project_wp_required_version" value="" />
  <property name="project_wp_up_to_version" value="" />

  <!-- No need to edit anything below this line. -->

  <property name="_build_dir" value="${project.basedir}/.~build" />
  <property name="_src_dir" value="${project.basedir}/src" />
  <property name="_vendor_dir" value="${_src_dir}/vendor" />
  <property name="_stub" value="${_src_dir}/stub.php" />

  <property name="_composer_path" value="/usr/bin/env composer" />
  <property name="_composer_json" value="${project.basedir}/composer.json" />
  <property name="_composer_lock" value="${project.basedir}/composer.lock" />

  <property name="_phar_stub" value="${_src_dir}/phar-stub.php" />
  <property name="_phar_file" value="${_build_dir}/${project_org}-${project_slug}.phar" />

  <tstamp><format property="_time_ymd" pattern="%y%m%d" /></tstamp>
  <php expression="str_replace('%y%m%d', date('ymd'), '${project_version}')" returnproperty="project_version" />

  <target name="-preamble">
    <echo msg="OS: ${os.name}" />
    <echo msg="Home: ${user.home}" />
    <echo msg="------------------------------------" />
    <echo msg="PHP Version: ${php.version}" />
    <echo msg="Phing Version: ${phing.version}" />
    <echo msg="------------------------------------" />
    <echo msg="Project Name: ${phing.project.name}" />
    <echo msg="Project Directory: ${project.basedir}" />
    <echo msg="------------------------------------" />
    <echo msg="Project Org.: ${project_org}" />
    <echo msg="Project Slug: ${project_slug}" />
    <echo msg="Project SNS: ${project_sns}" />
    <echo msg="------------------------------------" />
    <echo msg="Project Version: ${project_version}" />
    <echo msg="Project PHP Required Version: ${project_php_required_version}" />
    <echo msg="Project PHP Tested Up To Version: ${project_php_up_to_version}" />
    <echo msg="Project WP Required Version: ${project_wp_required_version}" />
    <echo msg="Project WP Tested Up To Version: ${project_wp_up_to_version}" />
    <echo msg="------------------------------------" />
    <echo msg="Build Directory: ${_build_dir}" />
    <echo msg="Src Directory: ${_src_dir}" />
    <echo msg="Vendor Directory: ${_vendor_dir}" />
    <echo msg="Stub File: ${_stub}" />
    <echo msg="------------------------------------" />
    <echo msg="Composer Path: ${_composer_path}" />
    <echo msg="Composer JSON: ${_composer_json}" />
    <echo msg="Composer Lock: ${_composer_lock}" />
    <echo msg="------------------------------------" />
    <echo msg="PHAR Stub: ${_phar_stub}" />
    <echo msg="PHAR File: ${_phar_file}" />
    <echo msg="------------------------------------" />
  </target>

  <target name="-prepare" depends="-preamble">
    <echo msg="Preparing to build..." />
    <echo msg="------------------------------------" />
    <echo msg="Deleting previous: ${_build_dir} ..." />
    <delete dir="${_build_dir}" includeemptydirs="true" quiet="true" />
    <echo msg="------------------------------------" />
    <echo msg="Creating: ${_build_dir} ..." />
    <mkdir dir="${_build_dir}" />
    <echo msg="------------------------------------" />
  </target>

  <target name="-rtokens" depends="-preamble,-prepare">
    <if>
      <and>
        <available resource="${_src_dir}" type="dir" />
      </and>
      <then>
        <echo msg="Replacing tokens in: ${_src_dir} ..." />
        <reflexive>
          <fileset dir="${_src_dir}">
            <exclude pattern="vendor/**" />
          </fileset>
          <filterchain>
            <replaceregexp>
              <regexp pattern="'[^']*?';\s*\/\/version\/\/$" replace="'${project_version}'; //version//" modifiers="m" />
              <regexp pattern='"[^"]*?";\s*\/\/version\/\/$' replace='"${project_version}"; //version//' modifiers="m" />

              <regexp pattern="'[^']*?';\s*\/\/php\-required\-version\/\/$" replace="'${project_php_required_version}'; //php-required-version//" modifiers="m" />
              <regexp pattern='"[^"]*?";\s*\/\/php\-required\-version\/\/$' replace='"${project_php_required_version}"; //php-required-version//' modifiers="m" />

              <regexp pattern="'[^']*?';\s*\/\/php\-up\-to\-version\/\/$" replace="'${project_php_up_to_version}'; //php-up-to-version//" modifiers="m" />
              <regexp pattern='"[^"]*?";\s*\/\/php\-up\-to\-version\/\/$' replace='"${project_php_up_to_version}"; //php-up-to-version//' modifiers="m" />

              <regexp pattern="'[^']*?';\s*\/\/wp\-required\-version\/\/$" replace="'${project_wp_required_version}'; //wp-required-version//" modifiers="m" />
              <regexp pattern='"[^"]*?";\s*\/\/wp\-required\-version\/\/$' replace='"${project_wp_required_version}"; //wp-required-version//' modifiers="m" />

              <regexp pattern="'[^']*?';\s*\/\/wp\-up\-to\-version\/\/$" replace="'${project_wp_up_to_version}'; //wp-up-to-version//" modifiers="m" />
              <regexp pattern='"[^"]*?";\s*\/\/wp\-up\-to\-version\/\/$' replace='"${project_wp_up_to_version}"; //wp-up-to-version//' modifiers="m" />
            </replaceregexp>
          </filterchain>
        </reflexive>
        <echo msg="------------------------------------" />
      </then>
    </if>
    <if>
      <and>
        <available file="${_src_dir}/readme.txt" />
        <or>
          <available file="${_src_dir}/plugin.php" />
          <available file="${_src_dir}/style.css" />
        </or>
      </and>
      <then>
        <echo msg="Replacing WP tokens in: ${_src_dir ..." />
        <reflexive>
          <fileset dir="${_src_dir}">
            <exclude pattern="readme.txt" />
            <exclude pattern="plugin.php" />
            <exclude pattern="style.css" />
          </fileset>
          <filterchain>
            <replaceregexp>
              <regexp pattern="^Version\:.+$" replace="Version: ${project_version}" modifiers="m" />
              <regexp pattern="^Stable tag\:.+$" replace="Stable tag: ${project_version}" modifiers="m" />

              <regexp pattern="^Requires at least\:.+$" replace="Requires at least: ${project_wp_required_version}" modifiers="m" />
              <regexp pattern="^Tested up to\:.+$" replace="Tested up to: ${project_wp_up_to_version}" modifiers="m" />

              <regexp pattern="^Requires PHP\:.+$" replace="Requires PHP: ${project_php_required_version}" modifiers="m" />
              <regexp pattern="^Tested up to PHP\:.+$" replace="Tested up to PHP: ${project_php_up_to_version}" modifiers="m" />
            </replaceregexp>
          </filterchain>
        </reflexive>
        <echo msg="------------------------------------" />
      </then>
    </if>
  </target>

  <target name="-composer" depends="-preamble,-prepare">
    <if>
      <and>
        <available file="${_composer_json}" />
      </and>
      <then>
        <echo msg="Deleting previous: ${_vendor_dir} ..." />
        <delete dir="${_vendor_dir}" includeemptydirs="true" quiet="true" />
        <echo msg="------------------------------------" />
        <echo msg="Deleting previous: ${_composer_lock} ..." />
        <delete file="${_composer_lock}" quiet="true" />
        <echo msg="------------------------------------" />
        <echo msg="Running Composer..." />
        <exec command="${_composer_path} install" dir="${project.basedir}" passthru="true" checkreturn="true" />
        <echo msg="------------------------------------" />
      </then>
    </if>
  </target>

  <target name="-rebrand" depends="-preamble,-prepare">
    <if>
      <and>
        <available file="${_vendor_dir}/composer/autoload_psr4.php" />
        <available resource="${_vendor_dir}/websharks/core" type="dir" />
      </and>
      <then>
        <echo msg="Rebranding: ${_vendor_dir}/websharks/core ..." />
        <reflexive>
          <fileset dir="${_vendor_dir}/websharks/core">
            <include pattern="src/includes/interfaces/*.php" />
            <include pattern="src/includes/classes/*.php" />
            <include pattern="src/includes/traits/*.php" />
          </fileset>
          <filterchain>
            <replaceregexp>
              <regexp pattern="\bnamespace\s+WebSharks\\Core(?:\\[^\\]+)?\\Classes\b" replace="namespace WebSharks\\Core\\${project_sns}\\Classes" />
              <regexp pattern="\bnamespace\s+WebSharks\\Core(?:\\[^\\]+)?\\Interfaces\b" replace="namespace WebSharks\\Core\\${project_sns}\\Interfaces" />
              <regexp pattern="\bnamespace\s+WebSharks\\Core(?:\\[^\\]+)?\\Traits\b" replace="namespace WebSharks\\Core\\${project_sns}\\Traits" />
            </replaceregexp>
          </filterchain>
        </reflexive>
        <reflexive>
          <fileset dir="${_vendor_dir}/composer">
            <include pattern="autoload_psr4.php" />
          </fileset>
          <filterchain>
            <replaceregexp>
              <regexp pattern="\bWebSharks\\\\Core(?:\\\\[^\\]+)?\\\\Classes\b" replace="WebSharks\\\\Core\\\\${project_sns}\\\\Classes" />
              <regexp pattern="\bWebSharks\\\\Core(?:\\\\[^\\]+)?\\\\Interfaces\b" replace="WebSharks\\\\Core\\\\${project_sns}\\\\Interfaces" />
              <regexp pattern="\bWebSharks\\\\Core(?:\\\\[^\\]+)?\\\\Traits\b" replace="WebSharks\\\\Core\\\\${project_sns}\\\\Traits" />
            </replaceregexp>
          </filterchain>
        </reflexive>
        <echo msg="------------------------------------" />
      </then>
    </if>
    <if>
      <and>
        <available file="${_vendor_dir}/composer/autoload_psr4.php" />
        <available resource="${_vendor_dir}/websharks/wp-core" type="dir" />
      </and>
      <then>
        <echo msg="Rebranding: ${_vendor_dir}/websharks/wp-core ..." />
        <reflexive>
          <fileset dir="${_vendor_dir}/websharks/wp-core">
            <include pattern="src/includes/interfaces/*.php" />
            <include pattern="src/includes/classes/*.php" />
            <include pattern="src/includes/traits/*.php" />
          </fileset>
          <filterchain>
            <replaceregexp>
              <regexp pattern="\bnamespace\s+WebSharks\\WpCore(?:\\[^\\]+)?\\Classes\b" replace="namespace WebSharks\\WpCore\\${project_sns}\\Classes" />
              <regexp pattern="\bnamespace\s+WebSharks\\WpCore(?:\\[^\\]+)?\\Interfaces\b" replace="namespace WebSharks\\WpCore\\${project_sns}\\Interfaces" />
              <regexp pattern="\bnamespace\s+WebSharks\\WpCore(?:\\[^\\]+)?\\Traits\b" replace="namespace WebSharks\\WpCore\\${project_sns}\\Traits" />
            </replaceregexp>
          </filterchain>
        </reflexive>
        <reflexive>
          <fileset dir="${_vendor_dir}/composer">
            <include pattern="autoload_psr4.php" />
          </fileset>
          <filterchain>
            <replaceregexp>
              <regexp pattern="\bWebSharks\\\\WpCore(?:\\\\[^\\]+)?\\\\Classes\b" replace="WebSharks\\\\WpCore\\\\${project_sns}\\\\Classes" />
              <regexp pattern="\bWebSharks\\\\WpCore(?:\\\\[^\\]+)?\\\\Interfaces\b" replace="WebSharks\\\\WpCore\\\\${project_sns}\\\\Interfaces" />
              <regexp pattern="\bWebSharks\\\\WpCore(?:\\\\[^\\]+)?\\\\Traits\b" replace="WebSharks\\\\WpCore\\\\${project_sns}\\\\Traits" />
            </replaceregexp>
          </filterchain>
        </reflexive>
        <echo msg="------------------------------------" />
      </then>
    </if>
  </target>

  <target name="-phar" depends="-preamble,-prepare">
    <if>
      <and>
        <available file="${_phar_stub}" />
        <available resource="${_src_dir}" type="dir" />
      </and>
      <then>
        <echo msg="Deleting previous: ${_phar_file} ..." />
        <delete file="${_phar_file}" quiet="true" />
        <echo msg="------------------------------------" />
        <echo msg="Creating PHAR file..." />
        <pharpackage basedir="${project.basedir}" stub="${_phar_stub}" destfile="${_phar_file}">
          <fileset dir="${_src_dir}">
            <exclude name="**/.git**" />
            <exclude name="**/build.xml" />
            <exclude name="**/composer.json" />
            <exclude name="**/composer.lock" />
            <exclude name="**/LICENSE.txt" />
            <exclude name="**/README.md" />
            <exclude name="**/CHANGELOG.md" />
            <exclude name="**/.htaccess" />
            <exclude name="**/phar-stub.php" />
            <exclude name="**/vendor/bin/**" />
            <exclude name="**/.~**" />
          </fileset>
        </pharpackage>
        <echo msg="------------------------------------" />
      </then>
    </if>
  </target>

  <target name="build" depends="-preamble,-prepare,-rtokens,-composer,-rebrand,-phar">
    <echo msg="Build complete! :-)" />
  </target>

</project>
